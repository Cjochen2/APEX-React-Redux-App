{"version":3,"sources":["components/ProductCard/index.js","utils/actions.js","components/ProductContent/index.js","utils/reducer.js","index.js","App.js"],"names":["connect","dispatch","ownProps","addToCart","type","payload","partNo","number","price","props","react_default","a","createElement","className","src","img","alt","name","onClick","state","purchase","map","products","components_ProductCard","key","pricing","initialState","rootReducer","combineReducers","arguments","length","undefined","action","console","log","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","ProductContent","document","getElementById"],"mappings":"i3BAmCeA,qBAAQ,KAPI,SAACC,EAAUC,GAClC,MAAO,CACHC,UAAW,kBAAMF,EC3BiB,CACtCG,KAAK,gBACLC,QDyB2C,CAAEC,OAAQJ,EAASK,OAAQC,MAAON,EAASM,YAK3ER,CA3BK,SAACS,GACjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,IAAKC,IAAKP,EAAMQ,QAGpCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYJ,EAAMQ,MAChCP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,WAAmCH,EAAAC,EAAAC,cAAA,cAASH,EAAMF,SAClDG,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAiBH,EAAAC,EAAAC,cAAA,cAASH,EAAMD,QAC7CE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeK,QAAS,kBAAMT,EAAMN,cAAtD,oBEUDH,cAJS,SAACmB,GACrB,MAAO,CAAEA,UAGEnB,CAvBQ,SAACS,GAEpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACVJ,EAAMU,MAAMC,SAASC,IAAI,SAAAC,GACtB,OACIZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKF,EAASf,OACdU,KAAMK,EAASL,KACfV,OAAQe,EAASf,OACjBC,MAAOc,EAASG,QAChBV,IAAKO,EAASP,sBCfhCW,QAqBSC,EAJKC,YAAgB,CAChCR,SAhBa,WAAkC,IAAjCD,EAAiCU,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAOC,EAAO5B,MACV,IAAK,gBAID,OAFA6B,QAAQC,IAAI,mBACZD,QAAQC,IAAIF,EAAO3B,SACZc,EAEX,QACI,OAAOA,MCFbgB,EAAQC,YAAYT,EACtBU,OAAOC,8BAAgCD,OAAOC,gCAGlDC,IAASC,OACL9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAUN,MAAOA,GACbzB,EAAAC,EAAAC,cCfO,WAEb,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,8BACAH,EAAAC,EAAAC,cAAC8B,EAAD,QDUE,OAEJC,SAASC,eAAe","file":"static/js/main.dac08336.chunk.js","sourcesContent":["import React from 'react';\r\nimport { purchasePart } from '../../utils/actions'\r\nimport { connect } from 'react-redux';\r\nimport './style.css'\r\n\r\n// Added some bootstrap for some quick short hand styling as well as some basic CSS to make it resemble the PDF image\r\n// not an exact match but.... maybe close enough?\r\n\r\nconst ProductCard = (props) => {\r\n    return (\r\n        <div className=\"row productCard\">\r\n\r\n            <div className=\"col-12 col-md-4\">\r\n                <img src={props.img} alt={props.name} />\r\n            </div>\r\n\r\n            <div className=\"col-12 col-md-8\">\r\n                <h5 className=\"prodName\">{props.name}</h5>\r\n                <p className=\"partNo mb-1\">PartNo: <strong>{props.number}</strong></p>\r\n                <p className=\"priceInfo mb-1\"><strong>{props.price}</strong></p>\r\n                <button className='addCart mb-2' onClick={() => props.addToCart()}>Add to Cart</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        addToCart: () => dispatch(purchasePart({ partNo: ownProps.number, price: ownProps.price }))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(ProductCard);","\r\n// For larger scale applications I would have and Action_Types file with all the type constants.\r\n\r\nexport const purchasePart = (payload) => ({\r\n    type:\"PURCHASE_PART\",\r\n    payload\r\n})","import React from 'react';\r\nimport ProductCard from '../ProductCard/'\r\nimport { connect } from 'react-redux';\r\n\r\n// For something this small I didn't need this component but felt like it better simulated real life scenario\r\n// of having a body component that houses the page content vs for example a navBar or jumbotron\r\n\r\nconst productContent = (props) => {\r\n\r\n    return (\r\n        <div className='pageContent'>\r\n            {props.state.purchase.map(products => {\r\n                return (\r\n                    <ProductCard\r\n                        key={products.number}\r\n                        name={products.name}\r\n                        number={products.number}\r\n                        price={products.pricing}\r\n                        img={products.img}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { state }\r\n}\r\n\r\nexport default connect(mapStateToProps)(productContent)","import { combineReducers } from 'redux';\r\nimport product from '../products.json';\r\n\r\nconst initialState = product\r\n\r\nconst purchase = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case \"PURCHASE_PART\":\r\n            // Logs Name and price to console.\r\n            console.log(\"Part and Cost: \")\r\n            console.log(action.payload)\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Did this to simulate how I would handle multiple reducers. Typically I would have this run in an index file that\r\n// brings in all the reducers from various files.\r\nconst rootReducer = combineReducers({\r\n    purchase,\r\n})\r\n\r\nexport default rootReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// Create Store, Wrap the Provider Component to the App\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './utils/reducer';\n\n//The extra argument in store is for a Redux extension on Chrome. It allows the developer to see the full state tree\n\nconst store = createStore(rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n","import React from \"react\";\nimport ProductContent from './components/ProductContent/'\n\nexport default function App() {\n\n  return (\n    <div className=\"container-fluid\">\n      <h1 className='mb-3'>Curtis Jochen's Auto Parts</h1>\n      <ProductContent />\n    </div>\n  );\n}\n"],"sourceRoot":""}